{
    "version": "https://jsonfeed.org/version/1",
    "title": "Clarence M.",
    "home_page_url": "https://cm0.dev/",
    "feed_url": "https://cm0.dev/feed.json",
    "description": "This blog is a place to share my knowledge and experience within the world of IT.",
    "icon": "https://cm0.dev/apple-touch-icon.png",
    "favicon": "https://cm0.dev/favicon.ico",
    "expired": false,
    
    "author":  {
        "name": "Clarence M.",
        "url": "https://cm0.dev",
        "avatar": null
    },
    
"items": [
    
        {
            "id": "https://cm0.dev/2022/01/06/avaya-1100-series-freepbx",
            "title": "Using Avaya 1100 Series IP phones with FreePBX",
            "summary": "This post describes how to use Avaya 1100 Series IP phones with FreePBX.",
            "content_text": "I had a few Avaya/Nortel 1120e/1140e IP phones laying around at home and decided to create a house phone and intercom system. Setting these phones up with FreePBX/Astericks was a chore and after many hours of trial and error and google searching, i’ve managed to get these working pretty well with FreePBX.Prerequisites  Advanced technical knowledge. This guide is not intended for beginners.  A working FreePBX/Asterisks server.  A TFTP server.  (Optional) A configurable DHCP server.Converting Phones from UNISTIM to SIPIf you have one of these phones, there is a good chance that it is running the old UNISTIM firmware. You will need to flash the SIP firmware to the phone in order to get it to work with FreePBX.In order to do this easily, a TFTP server should be used. TFTPD64 is an example of one to use. Then configure your DHCP server to include the TFTP’s server IP address in DHCP option 66. If your DHCP server does not allow you to do this, then use TFTPD64’s built in DHCP server.Next download the latest firmware for your phone’s model. The latest versions are always available on Avaya’s website. Place the downloaded .bin file in the TFTP server’s root directory.In the TFTP’s root directory, you will then need to create the following files depending on your phone model.  1120e.cfg  1120eSIP.cfg  1140e.cfg  1140eSIP.cfgIt is important that they are named according to your phone’s model as shown as above. The phone will be looking for these files as soon as it connects to the TFTP server.In each .cfg file above, include the following contents at the top:[FW]DOWNLOAD_MODE FORCEDVERSION &lt;firmware file name&gt;FILENAME &lt;firmware file name&gt;PROTOCOL TFTPSERVER_IP &lt;tftp server ip&gt;SECURITY_MODE 0  Replace &lt;firmware file name&gt; with the file name of the firmware you downloaded from Avaya. Ensure that the firmware file is correct for the model you are upgrading.  Replace &lt;tftp server ip&gt; with the IP address of your TFTP server.Now power up the phone whilst connected to the network and the phone should begin to upgrade its firmware. When the phone powers up, it will obtain the TFTP server automatically from the DHCP server. Then the following will happen:  Read the appropriate firmware file for the phone’s model. For example, a 1120e on the UNISTIM firmware will read the 1120e.cfg file or a 1120e on the SIP firmware will read the 1120eSIP.cfg file.  The phone then downloads the firmware file specified in the configuration file.  The phone will write the firmware to its memory and reboot.  If the phone was previously on the UNISTIM firmware and now on the SIP firmware, it will now read configuration files ending in SIP.Error: Authentication FailedIf you receive an error [FW] Authentication Failed this usually means that you are upgrading the firmware of the phone that is too far ahead. In this case you will need to incrementally upgrade the phone up until the latest the version.You may also try using the phone’s BootC mode which is essentialy its recovery mode. I’ve found that you can usually bypass this error using this mode. When the phone immediately powers on, hold the Up + 2 key until you see Starting DHCP... and it will contact the TFTP server to grab the firmware files.If in BootC mode, the phone continues to boot normally after Starting DHCP... is shown, you will need to manually input the TFTP server. Again hold Up + 2 but as soon as the phone’s lights turn off, immediately press the four soft keys below the screen, from left to right in quick succession. If done correctly, you should see a manual configuration prompt. This mode will allow you to input your TFTP’s server IP address. Use the phone’s buttons to navigate through this menu. After you have applied the settings, the phone should reboot and upgrade the firmware.Setting up FreePBX/AsteriskOnce you have upgraded the firmware to SIP, you can now configure FreePBX. In the FreePBX GUI, create a CHAN_SIP extension. It is important that it is on CHAN_SIP as using CHAN_PJSIP will cause the phones to loose SIP registration to the PBX after some time. Take note that when using CHAN_SIP extensions, the SIP port will be 5160/udp instead of the standard 5060/udp port.Creating Provisoning FilesWe will now create provisoning files for the phones so that they can connect to the FreePBX server. This can also be done manually by inputting the SIP domain and authentication credentials manually on the phone itself.Using the same TFTP server, open your device’s model configuration file. So if you have a 1120e phone, open the 1120eSIP.cfg file. Below the [FW] section, add the following section below it:[DEVICE_CONFIG]DOWNLOAD_MODE FORCEDFILENAME device.cfgVERSION 000001PROTOCOL TFTP[USER_CONFIG]DOWNLOAD_MODE FORCEDVERSION 000001PROTOCOL TFTPEnsure that [DEVICE_CONFIG] is followed by [USER_CONFIG] as the phone reads these files from top to bottom and will overwrite settings if the sections are out of order.Next create a device.cfg file in the same directory on the TFTP server. In that file, put the following contents:DNS_DOMAIN &lt;dns domain&gt;SIP_DOMAIN1 &lt;sip domain&gt;SERVER_IP1_1 &lt;sip domain&gt;SERVER_PORT1_1 5160SERVER_RETRIES1 3FORCE_BANNER YESBANNER THIS IS A BANNERVMAIL *97VMAIL_DELAY 300MAX_APPEARANCE 1DEF_LANG EnglishDEF_AUDIO_QUALITY HighLLDP_ENABLE YESADMIN_PASSWORD 1234ADMIN_PASSWORD_EXPIRY 0DEF_AUDIO_QUALITY HighTIMEZONE_OFFSET &lt;time zone&gt;FORCE_TIME_ZONE YES# Disable extended featuresMAX_LOGINS 1USB_HEADSET LOCKEXP_MODULE_ENABLE NOENABLE_SERVICE_PACKAGE NOIM_MODE DISABLEDAVAYA_AUTOMATIC_QoS NOVQMON_PUBLISH NOSIP_TLS_PORT 0ENABLE_BT NOReplace…  &lt;dns domain&gt; with the DNS domain name of your PBX. This can also be set to the IP address of the PBX server.  &lt;sip domain&gt; with the SIP domain name of your PBX. This can also be set to the IP address of the PBX server.      &lt;time zone&gt; with the time zone offset. The offsets are:                            Location          Time zone offset (seconds)                                      (GMT-04:00) Atlantic Standard Time          -14400                          (GMT-03:30) Newfoundland          -12600                          (GMT-03:00) Buenos Aires          -10800                          (GMT-02:30) Newfoundland DST          -9000                          (GMT-01:00) Azores          -3600                          (GMT+00:00) Greenwich, Dublin, Lisbon, London          0                          (GMT+01:00) Central European Time          3600                          (GMT+02:00) Athens          7200                          (GMT+03:00) Moscow          10800                          (GMT+03:30) Tehran          12600                          (GMT+04:00) Abu Dhabi          14400                          (GMT+04:30) Khabul          16200                          (GMT+05:00) Islamabad          18000                          (GMT+05:30) Indian Standard Time          19800                          (GMT+06:00) Sri Lanka          21600                          (GMT+06:30) Myanmar          23400                          (GMT+07:00) Bangkok          25200                          (GMT+08:00) China Standard Time          28800                          (GMT+09:00) Japan Standard Time          32400                          (GMT+09:30) Australian Central Standard Time          34200                          (GMT+10:00) Australian Eastern Standard Time          36000                          (GMT+11:00) Micronesia          39600                          (GMT+12:00) Fiji          43200                          (GMT+13:00) New Zealand          46800                    If you do not have a license for these phones, ensure that everything below Disable extended features is included, otherwise you will not be able to login to the phone.Now you will need to get the MAC address of the phone. This can be found at the back of the phone. Once you have the MAC address, create a file called SIP&lt;MAC&gt;.cfg replacing &lt;MAC&gt; with the phone’s MAC address. In that file, put the following contents:AUTOLOGIN_ENABLE USE_AUTOLOGIN_IDAUTOLOGIN_ID_KEY01 &lt;sip username&gt;@&lt;sip domain&gt;AUTOLOGIN_AUTHID_KEY01 &lt;sip username&gt;AUTOLOGIN_PASSWD_KEY01 &lt;sip password&gt;Replace…  &lt;sip username&gt; with the SIP username of your desired extension.  &lt;sip domain&gt; with the SIP domain name of your PBX that you configured in device.cfg  &lt;sip password&gt; with the SIP password of your desired extension.Once you are done, reboot the phone and it should grab the configuration files from the TFTP server and connect to your FreePBX server.Configuring other Phone Features.There are a lot of paramters that can be configured. Refer to the SIP Administration Guide from Avaya for more information.Configuring Intercom/Paging FeaturesTo get intercom/paging working on FreePBX, you will need to set ENABLE_ANSWER_MODE to YES in the device.cfg file. Unfortunately, enabling this will require a license for the phone. If you do not have a license and you enable this, you will be locked out of the phone until it is disabled and reset. After you have enabled this, go into the phone’s preferences (press more soft key until you see prefs) -&gt; Feature Options -&gt; Answer Mode Settings and set Allow Mode to public and in Allow Addresses input the SIP addresses to allow intercom/paging from.Then on FreePBX ssh into it and edit /etc/asterisk/extensions_override_freepbx.conf with the following:[autoanswer]include =&gt; autoanswer-customexten =&gt; s,1,GosubIf($[\"${ARG1}\" != \"\"]?func-set-sipheader,s,1(Alert-Info,${ARG1}))exten =&gt; s,n,GosubIf($[\"${ARG2}\" != \"\"]?func-set-sipheader,s,1(Call-Info,${ARG2}))exten =&gt; s,n,Gosub(func-set-sipheader,s,1(Answer-Mode,Auto))exten =&gt; s,n,Gosub(func-apply-sipheaders,s,1())exten =&gt; s,n,Return()What this is doing is adding an additional SIP header to the SIP INVITE packet so that the phone will automatically answer the call. This header is the Answer-Mode header. More information about this can be found from RFC 5373Resetting the PhoneTo reset the phone you will need to know the mac address of the phone. This can be found at the back of the phone. Enter the following key combination to reset the phone:**[7][3][6][3][9][MAC][#][#]If your MAC address has letters, use the corresponding number to represent the letters. For example if you have an A in the MAC address, you will need to use the number 2. If you have a F in the MAC address, you will need to use the number 3 and so on.",
            "content_html": "<p>I had a few Avaya/Nortel 1120e/1140e IP phones laying around at home and decided to create a house phone and intercom system. Setting these phones up with FreePBX/Astericks was a chore and after many hours of trial and error and google searching, i’ve managed to get these working pretty well with FreePBX.</p><h1 id=\"prerequisites\">Prerequisites</h1><hr /><ul>  <li>Advanced technical knowledge. This guide is not intended for beginners.</li>  <li>A working FreePBX/Asterisks server.</li>  <li>A TFTP server.</li>  <li>(Optional) A configurable DHCP server.</li></ul><h1 id=\"converting-phones-from-unistim-to-sip\">Converting Phones from UNISTIM to SIP</h1><hr /><p>If you have one of these phones, there is a good chance that it is running the old UNISTIM firmware. You will need to flash the SIP firmware to the phone in order to get it to work with FreePBX.</p><p>In order to do this easily, a TFTP server should be used. <a href=\"https://pjo2.github.io/tftpd64/\">TFTPD64</a> is an example of one to use. Then configure your DHCP server to include the TFTP’s server IP address in DHCP option 66. If your DHCP server does not allow you to do this, then use TFTPD64’s built in DHCP server.</p><p>Next download the latest firmware for your phone’s model. The latest versions are always available on <a href=\"https://support.avaya.com/products/P0599/1100-series-ip-deskphones/\">Avaya’s website</a>. Place the downloaded <code class=\"highlighter-rouge\">.bin</code> file in the TFTP server’s root directory.</p><p>In the TFTP’s root directory, you will then need to create the following files depending on your phone model.</p><ul>  <li><code class=\"highlighter-rouge\">1120e.cfg</code></li>  <li><code class=\"highlighter-rouge\">1120eSIP.cfg</code></li>  <li><code class=\"highlighter-rouge\">1140e.cfg</code></li>  <li><code class=\"highlighter-rouge\">1140eSIP.cfg</code></li></ul><p>It is important that they are named according to your phone’s model as shown as above. The phone will be looking for these files as soon as it connects to the TFTP server.</p><p>In each <code class=\"highlighter-rouge\">.cfg</code> file above, include the following contents at the top:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[FW]DOWNLOAD_MODE FORCEDVERSION &lt;firmware file name&gt;FILENAME &lt;firmware file name&gt;PROTOCOL TFTPSERVER_IP &lt;tftp server ip&gt;SECURITY_MODE 0</code></pre></div></div><ul>  <li>Replace <code class=\"highlighter-rouge\">&lt;firmware file name&gt;</code> with the file name of the firmware you downloaded from Avaya. Ensure that the firmware file is correct for the model you are upgrading.</li>  <li>Replace <code class=\"highlighter-rouge\">&lt;tftp server ip&gt;</code> with the IP address of your TFTP server.</li></ul><p>Now power up the phone whilst connected to the network and the phone should begin to upgrade its firmware. When the phone powers up, it will obtain the TFTP server automatically from the DHCP server. Then the following will happen:</p><ol>  <li>Read the appropriate firmware file for the phone’s model. For example, a 1120e on the UNISTIM firmware will read the <code class=\"highlighter-rouge\">1120e.cfg</code> file or a 1120e on the SIP firmware will read the <code class=\"highlighter-rouge\">1120eSIP.cfg</code> file.</li>  <li>The phone then downloads the firmware file specified in the configuration file.</li>  <li>The phone will write the firmware to its memory and reboot.</li>  <li>If the phone was previously on the UNISTIM firmware and now on the SIP firmware, it will now read configuration files ending in SIP.</li></ol><h2 id=\"error-authentication-failed\">Error: Authentication Failed</h2><p>If you receive an error <code class=\"highlighter-rouge\">[FW] Authentication Failed</code> this usually means that you are upgrading the firmware of the phone that is too far ahead. In this case you will need to incrementally upgrade the phone up until the latest the version.</p><p>You may also try using the phone’s BootC mode which is essentialy its recovery mode. I’ve found that you can usually bypass this error using this mode. When the phone immediately powers on, hold the Up + 2 key until you see <code class=\"highlighter-rouge\">Starting DHCP...</code> and it will contact the TFTP server to grab the firmware files.</p><p>If in BootC mode, the phone continues to boot normally after <code class=\"highlighter-rouge\">Starting DHCP...</code> is shown, you will need to manually input the TFTP server. Again hold Up + 2 but as soon as the phone’s lights turn off, immediately press the four soft keys below the screen, from left to right in quick succession. If done correctly, you should see a manual configuration prompt. This mode will allow you to input your TFTP’s server IP address. Use the phone’s buttons to navigate through this menu. After you have applied the settings, the phone should reboot and upgrade the firmware.</p><h1 id=\"setting-up-freepbxasterisk\">Setting up FreePBX/Asterisk</h1><hr /><p>Once you have upgraded the firmware to SIP, you can now configure FreePBX. In the FreePBX GUI, create a <strong>CHAN_SIP</strong> extension. It is important that it is on CHAN_SIP as using CHAN_PJSIP will cause the phones to loose SIP registration to the PBX after some time. Take note that when using CHAN_SIP extensions, the SIP port will be 5160/udp instead of the standard 5060/udp port.</p><h1 id=\"creating-provisoning-files\">Creating Provisoning Files</h1><hr /><p>We will now create provisoning files for the phones so that they can connect to the FreePBX server. This can also be done manually by inputting the SIP domain and authentication credentials manually on the phone itself.</p><p>Using the same TFTP server, open your device’s model configuration file. So if you have a 1120e phone, open the <code class=\"highlighter-rouge\">1120eSIP.cfg</code> file. Below the <code class=\"highlighter-rouge\">[FW]</code> section, add the following section below it:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[DEVICE_CONFIG]DOWNLOAD_MODE FORCEDFILENAME device.cfgVERSION 000001PROTOCOL TFTP[USER_CONFIG]DOWNLOAD_MODE FORCEDVERSION 000001PROTOCOL TFTP</code></pre></div></div><p>Ensure that <code class=\"highlighter-rouge\">[DEVICE_CONFIG]</code> is followed by <code class=\"highlighter-rouge\">[USER_CONFIG]</code> as the phone reads these files from top to bottom and will overwrite settings if the sections are out of order.</p><p>Next create a <code class=\"highlighter-rouge\">device.cfg</code> file in the same directory on the TFTP server. In that file, put the following contents:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>DNS_DOMAIN &lt;dns domain&gt;SIP_DOMAIN1 &lt;sip domain&gt;SERVER_IP1_1 &lt;sip domain&gt;SERVER_PORT1_1 5160SERVER_RETRIES1 3FORCE_BANNER YESBANNER THIS IS A BANNERVMAIL *97VMAIL_DELAY 300MAX_APPEARANCE 1DEF_LANG EnglishDEF_AUDIO_QUALITY HighLLDP_ENABLE YESADMIN_PASSWORD 1234ADMIN_PASSWORD_EXPIRY 0DEF_AUDIO_QUALITY HighTIMEZONE_OFFSET &lt;time zone&gt;FORCE_TIME_ZONE YES# Disable extended featuresMAX_LOGINS 1USB_HEADSET LOCKEXP_MODULE_ENABLE NOENABLE_SERVICE_PACKAGE NOIM_MODE DISABLEDAVAYA_AUTOMATIC_QoS NOVQMON_PUBLISH NOSIP_TLS_PORT 0ENABLE_BT NO</code></pre></div></div><p>Replace…</p><ul>  <li><code class=\"highlighter-rouge\">&lt;dns domain&gt;</code> with the DNS domain name of your PBX. This can also be set to the IP address of the PBX server.</li>  <li><code class=\"highlighter-rouge\">&lt;sip domain&gt;</code> with the SIP domain name of your PBX. This can also be set to the IP address of the PBX server.</li>  <li>    <p><code class=\"highlighter-rouge\">&lt;time zone&gt;</code> with the time zone offset. The offsets are:</p>    <table>      <thead>        <tr>          <th>Location</th>          <th>Time zone offset (seconds)</th>        </tr>      </thead>      <tbody>        <tr>          <td>(GMT-04:00) Atlantic Standard Time</td>          <td>-14400</td>        </tr>        <tr>          <td>(GMT-03:30) Newfoundland</td>          <td>-12600</td>        </tr>        <tr>          <td>(GMT-03:00) Buenos Aires</td>          <td>-10800</td>        </tr>        <tr>          <td>(GMT-02:30) Newfoundland DST</td>          <td>-9000</td>        </tr>        <tr>          <td>(GMT-01:00) Azores</td>          <td>-3600</td>        </tr>        <tr>          <td>(GMT+00:00) Greenwich, Dublin, Lisbon, London</td>          <td>0</td>        </tr>        <tr>          <td>(GMT+01:00) Central European Time</td>          <td>3600</td>        </tr>        <tr>          <td>(GMT+02:00) Athens</td>          <td>7200</td>        </tr>        <tr>          <td>(GMT+03:00) Moscow</td>          <td>10800</td>        </tr>        <tr>          <td>(GMT+03:30) Tehran</td>          <td>12600</td>        </tr>        <tr>          <td>(GMT+04:00) Abu Dhabi</td>          <td>14400</td>        </tr>        <tr>          <td>(GMT+04:30) Khabul</td>          <td>16200</td>        </tr>        <tr>          <td>(GMT+05:00) Islamabad</td>          <td>18000</td>        </tr>        <tr>          <td>(GMT+05:30) Indian Standard Time</td>          <td>19800</td>        </tr>        <tr>          <td>(GMT+06:00) Sri Lanka</td>          <td>21600</td>        </tr>        <tr>          <td>(GMT+06:30) Myanmar</td>          <td>23400</td>        </tr>        <tr>          <td>(GMT+07:00) Bangkok</td>          <td>25200</td>        </tr>        <tr>          <td>(GMT+08:00) China Standard Time</td>          <td>28800</td>        </tr>        <tr>          <td>(GMT+09:00) Japan Standard Time</td>          <td>32400</td>        </tr>        <tr>          <td>(GMT+09:30) Australian Central Standard Time</td>          <td>34200</td>        </tr>        <tr>          <td>(GMT+10:00) Australian Eastern Standard Time</td>          <td>36000</td>        </tr>        <tr>          <td>(GMT+11:00) Micronesia</td>          <td>39600</td>        </tr>        <tr>          <td>(GMT+12:00) Fiji</td>          <td>43200</td>        </tr>        <tr>          <td>(GMT+13:00) New Zealand</td>          <td>46800</td>        </tr>      </tbody>    </table>  </li></ul><p>If you do not have a license for these phones, ensure that everything below <em>Disable extended features</em> is included, otherwise you will not be able to login to the phone.</p><p>Now you will need to get the MAC address of the phone. This can be found at the back of the phone. Once you have the MAC address, create a file called <code class=\"highlighter-rouge\">SIP&lt;MAC&gt;.cfg</code> replacing <code class=\"highlighter-rouge\">&lt;MAC&gt;</code> with the phone’s MAC address. In that file, put the following contents:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>AUTOLOGIN_ENABLE USE_AUTOLOGIN_IDAUTOLOGIN_ID_KEY01 &lt;sip username&gt;@&lt;sip domain&gt;AUTOLOGIN_AUTHID_KEY01 &lt;sip username&gt;AUTOLOGIN_PASSWD_KEY01 &lt;sip password&gt;</code></pre></div></div><p>Replace…</p><ul>  <li><code class=\"highlighter-rouge\">&lt;sip username&gt;</code> with the SIP username of your desired extension.</li>  <li><code class=\"highlighter-rouge\">&lt;sip domain&gt;</code> with the SIP domain name of your PBX that you configured in <code class=\"highlighter-rouge\">device.cfg</code></li>  <li><code class=\"highlighter-rouge\">&lt;sip password&gt;</code> with the SIP password of your desired extension.</li></ul><p>Once you are done, reboot the phone and it should grab the configuration files from the TFTP server and connect to your FreePBX server.</p><h1 id=\"configuring-other-phone-features\">Configuring other Phone Features.</h1><hr /><p>There are a lot of paramters that can be configured. Refer to the <a href=\"/assets/files/18125156.pdf\">SIP Administration Guide</a> from Avaya for more information.</p><h2 id=\"configuring-intercompaging-features\">Configuring Intercom/Paging Features</h2><p>To get intercom/paging working on FreePBX, you will need to set <code class=\"highlighter-rouge\">ENABLE_ANSWER_MODE</code> to YES in the device.cfg file. Unfortunately, enabling this will require a license for the phone. If you do not have a license and you enable this, you will be locked out of the phone until it is disabled and reset. After you have enabled this, go into the phone’s preferences (press more soft key until you see <em>prefs</em>) -&gt; Feature Options -&gt; Answer Mode Settings and set <em>Allow Mode</em> to public and in <em>Allow Addresses</em> input the SIP addresses to allow intercom/paging from.</p><p>Then on FreePBX ssh into it and edit <code class=\"highlighter-rouge\">/etc/asterisk/extensions_override_freepbx.conf</code> with the following:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[autoanswer]include =&gt; autoanswer-customexten =&gt; s,1,GosubIf($[\"${ARG1}\" != \"\"]?func-set-sipheader,s,1(Alert-Info,${ARG1}))exten =&gt; s,n,GosubIf($[\"${ARG2}\" != \"\"]?func-set-sipheader,s,1(Call-Info,${ARG2}))exten =&gt; s,n,Gosub(func-set-sipheader,s,1(Answer-Mode,Auto))exten =&gt; s,n,Gosub(func-apply-sipheaders,s,1())exten =&gt; s,n,Return()</code></pre></div></div><p>What this is doing is adding an additional SIP header to the SIP INVITE packet so that the phone will automatically answer the call. This header is the <code class=\"highlighter-rouge\">Answer-Mode</code> header. More information about this can be found from <a href=\"https://datatracker.ietf.org/doc/html/rfc5373#section-4.3.3\">RFC 5373</a></p><h2 id=\"resetting-the-phone\">Resetting the Phone</h2><p>To reset the phone you will need to know the mac address of the phone. This can be found at the back of the phone. Enter the following key combination to reset the phone:</p><p><code class=\"highlighter-rouge\">**[7][3][6][3][9][MAC][#][#]</code></p><p>If your MAC address has letters, use the corresponding number to represent the letters. For example if you have an A in the MAC address, you will need to use the number 2. If you have a F in the MAC address, you will need to use the number 3 and so on.</p>",
            "url": "https://cm0.dev/2022/01/06/avaya-1100-series-freepbx",
            
            
            
            "tags": ["voip","freepbx","asterisk","ip","phones","nortel","avaya","1100","1120e","1140e","series"],
            
            "date_published": "2022-01-06T00:00:00+00:00",
            "date_modified": "2022-01-06T00:00:00+00:00",
            
                "author":  {
                "name": "Clarence M.",
                "url": "https://cm0.dev",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://cm0.dev/2022/01/06/secure-boot-pop-os",
            "title": "How to Boot PopOS with Secure Boot",
            "summary": "This post describes how to boot PopOS or any other Linux distribution with Secure Boot.",
            "content_text": "IntroHow to boot PopOS (or any linux distro) with secure boot enabled.Prerequisites  This guide assumes that you have a working PopOS (21.10) installation and secure boot is currently disabled in the UEFI BIOS.  I also assume you have some experience working through the command line in linux.  These two files, obtainable here          Preloader.efi      Hashtool.efi      Steps  Open a terminal session and gain root privileges.    sudo -i        Change directory to /boot/efi/EFI/systemd.    cd /boot/efi/EFI/systemd        Verify that systemd-bootx64.efi is in this directory.    $&gt; lssystemd-bootx64.efi        Rename systemd-bootx64.efi to loader.efi    mv systemd-bootx64.efi loader.efi        Move both Preloader.efi and HashTool.efi to /boot/efi/EFI/systemd    mv Preloader.efi /boot/efi/EFI/systemdmv HashTool.efi /boot/efi/EFI/systemd        Rename Preloader.efi to systemd-bootx64.efi    mv Preloader.efi systemd-bootx64.efi        Reboot into BIOS and enable secure boot.  Reboot again and you should now see this screen:    Simply select OK to continue.  Select Enroll Hash    Select loader.efi and press enter.    It will ask if you want to Enroll this hash into the MOK database?. Simply select YES.    It will bring you back to the main menu. Select Enroll Hash again.    Repeat steps 10 and 11 with vmlinuz.efi which can be found by selecting ../ &gt; Pop_OS-....  Once you have completed the above, reboot the system and it should successfully boot into PopOS with secure boot enabled.Notes  Sometimes when updating PopOS, it will modify the .efi files. This will prevent PopOS from booting with secure boot again. To fix this simply re-enroll the hashes again (Steps 9-13) to fix the issue.",
            "content_html": "<h2 id=\"intro\">Intro</h2><hr /><p>How to boot PopOS (or any linux distro) with secure boot enabled.</p><h2 id=\"prerequisites\">Prerequisites</h2><hr /><ul>  <li>This guide assumes that you have a working PopOS (21.10) installation and secure boot is currently disabled in the UEFI BIOS.</li>  <li>I also assume you have some experience working through the command line in linux.</li>  <li>These two files, obtainable <a href=\"https://blog.hansenpartnership.com/linux-foundation-secure-boot-system-released/\">here</a>    <ul>      <li><em>Preloader.efi</em></li>      <li><em>Hashtool.efi</em></li>    </ul>  </li></ul><h2 id=\"steps\">Steps</h2><hr /><ol>  <li>Open a terminal session and gain root privileges.    <div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sudo -i</code></pre></div>    </div>  </li>  <li>Change directory to <code class=\"highlighter-rouge\">/boot/efi/EFI/systemd</code>.    <div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>cd /boot/efi/EFI/systemd</code></pre></div>    </div>  </li>  <li>Verify that <code class=\"highlighter-rouge\">systemd-bootx64.efi</code> is in this directory.    <div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$&gt; lssystemd-bootx64.efi</code></pre></div>    </div>  </li>  <li>Rename <code class=\"highlighter-rouge\">systemd-bootx64.efi</code> to <code class=\"highlighter-rouge\">loader.efi</code>    <div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mv systemd-bootx64.efi loader.efi</code></pre></div>    </div>  </li>  <li>Move both <code class=\"highlighter-rouge\">Preloader.efi</code> and <code class=\"highlighter-rouge\">HashTool.efi</code> to <code class=\"highlighter-rouge\">/boot/efi/EFI/systemd</code>    <div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mv Preloader.efi /boot/efi/EFI/systemdmv HashTool.efi /boot/efi/EFI/systemd</code></pre></div>    </div>  </li>  <li>Rename <code class=\"highlighter-rouge\">Preloader.efi</code> to <code class=\"highlighter-rouge\">systemd-bootx64.efi</code>    <div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mv Preloader.efi systemd-bootx64.efi</code></pre></div>    </div>  </li>  <li>Reboot into BIOS and enable secure boot.</li>  <li>Reboot again and you should now see this screen:  <img src=\"/assets/images/secure-boot-popos/step8.jpg\" alt=\"bootimg\" />  Simply select OK to continue.</li>  <li>Select <em>Enroll Hash</em>  <img src=\"/assets/images/secure-boot-popos/step9.jpg\" alt=\"enrollhash\" /></li>  <li>Select <code class=\"highlighter-rouge\">loader.efi</code> and press enter.  <img src=\"/assets/images/secure-boot-popos/step10.jpg\" alt=\"enrollhash1\" /></li>  <li>It will ask if you want to <em>Enroll this hash into the MOK database?</em>. Simply select YES.  <img src=\"/assets/images/secure-boot-popos/step11.jpg\" alt=\"enrollhash2\" /></li>  <li>It will bring you back to the main menu. Select <em>Enroll Hash</em> again.  <img src=\"/assets/images/secure-boot-popos/step9.jpg\" alt=\"enrollhash\" /></li>  <li>Repeat steps 10 and 11 with <code class=\"highlighter-rouge\">vmlinuz.efi</code> which can be found by selecting <code class=\"highlighter-rouge\">../</code> &gt; <code class=\"highlighter-rouge\">Pop_OS-....</code></li>  <li>Once you have completed the above, reboot the system and it should successfully boot into PopOS with secure boot enabled.</li></ol><h2 id=\"notes\">Notes</h2><hr /><ul>  <li>Sometimes when updating PopOS, it will modify the .efi files. This will prevent PopOS from booting with secure boot again. To fix this simply re-enroll the hashes again (Steps 9-13) to fix the issue.</li></ul>",
            "url": "https://cm0.dev/2022/01/06/secure-boot-pop-os",
            
            
            
            "tags": ["linux","secure-boot","popos"],
            
            "date_published": "2022-01-06T00:00:00+00:00",
            "date_modified": "2022-01-06T00:00:00+00:00",
            
                "author":  {
                "name": "Clarence M.",
                "url": "https://cm0.dev",
                "avatar": null
                }
                
            
        }
    
    ]
}